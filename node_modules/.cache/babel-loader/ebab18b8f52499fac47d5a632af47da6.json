{"ast":null,"code":"var _jsxFileName = \"/home/admin1/Desktop/Chat System/Fundoo App/Front End/new-BookStore-FrontEnd/src/component/chatPage/Store.jsx\";\nimport React from \"react\";\nimport Io from 'socket.io-client';\nexport const CTX = React.createContext();\nconst initState = {\n  chat: [{\n    from: 'Prasad',\n    msg: 'hello'\n  }] // topic2 :[\n  //     {from:'aaron',msg:'hello'},\n  // ]\n\n};\n\nfunction reducer(state, action) {\n  const {\n    from,\n    msg\n  } = action.payload;\n\n  switch (action.type) {\n    case \"RECEIVE_MESSAGE\":\n      return { ...state,\n        [action.payload.topic]: [...state[action.payload.topic], {\n          from,\n          msg\n        }]\n      };\n\n    default:\n      return state;\n  }\n}\n\nlet socket;\n\nfunction sendChatAction(value) {\n  socket.emit('chat message', value);\n}\n\nexport default function Store(props) {\n  const [allChats, dispatch] = React.useReducer(reducer, initState);\n\n  if (!socket) {\n    socket = Io(':4000');\n    socket.on('chat message', function (msg) {\n      dispatch({\n        type: 'RECEIVE_MESSAGE',\n        payload: msg\n      });\n    });\n  }\n\n  const user = \"Prasad\";\n  return React.createElement(CTX.Provider, {\n    value: {\n      allChats,\n      sendChatAction,\n      user\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, props.children);\n}","map":{"version":3,"sources":["/home/admin1/Desktop/Chat System/Fundoo App/Front End/new-BookStore-FrontEnd/src/component/chatPage/Store.jsx"],"names":["React","Io","CTX","createContext","initState","chat","from","msg","reducer","state","action","payload","type","topic","socket","sendChatAction","value","emit","Store","props","allChats","dispatch","useReducer","on","user","children"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,EAAP,MAAe,kBAAf;AAIA,OAAO,MAAMC,GAAG,GAAGF,KAAK,CAACG,aAAN,EAAZ;AAGP,MAAMC,SAAS,GAAE;AACbC,EAAAA,IAAI,EAAE,CACF;AAACC,IAAAA,IAAI,EAAC,QAAN;AAAeC,IAAAA,GAAG,EAAC;AAAnB,GADE,CADO,CAIb;AACA;AAEA;;AAPa,CAAjB;;AAWA,SAASC,OAAT,CAAiBC,KAAjB,EAAwBC,MAAxB,EAA+B;AAC3B,QAAM;AAACJ,IAAAA,IAAD;AAAMC,IAAAA;AAAN,MAAaG,MAAM,CAACC,OAA1B;;AACA,UAAOD,MAAM,CAACE,IAAd;AACG,SAAK,iBAAL;AACI,aAAM,EACL,GAAGH,KADE;AAEL,SAACC,MAAM,CAACC,OAAP,CAAeE,KAAhB,GAAuB,CACnB,GAAGJ,KAAK,CAACC,MAAM,CAACC,OAAP,CAAeE,KAAhB,CADW,EAEnB;AACIP,UAAAA,IADJ;AAEIC,UAAAA;AAFJ,SAFmB;AAFlB,OAAN;;AAUH;AACI,aAAOE,KAAP;AAbR;AAeH;;AAID,IAAIK,MAAJ;;AACA,SAASC,cAAT,CAAwBC,KAAxB,EAA8B;AAC1BF,EAAAA,MAAM,CAACG,IAAP,CAAY,cAAZ,EAA2BD,KAA3B;AACH;;AAGD,eAAe,SAASE,KAAT,CAAeC,KAAf,EAAqB;AAEhC,QAAM,CAACC,QAAD,EAAWC,QAAX,IAAuBrB,KAAK,CAACsB,UAAN,CAAiBd,OAAjB,EAA0BJ,SAA1B,CAA7B;;AAEA,MAAG,CAACU,MAAJ,EAAW;AACPA,IAAAA,MAAM,GAAGb,EAAE,CAAC,OAAD,CAAX;AACAa,IAAAA,MAAM,CAACS,EAAP,CAAU,cAAV,EAAyB,UAAShB,GAAT,EAAa;AAClCc,MAAAA,QAAQ,CAAC;AAACT,QAAAA,IAAI,EAAE,iBAAP;AAAyBD,QAAAA,OAAO,EAAEJ;AAAlC,OAAD,CAAR;AAEH,KAHD;AAIH;;AACD,QAAMiB,IAAI,GAAG,QAAb;AAGA,SACI,oBAAC,GAAD,CAAK,QAAL;AAAc,IAAA,KAAK,EAAG;AAACJ,MAAAA,QAAD;AAAUL,MAAAA,cAAV;AAAyBS,MAAAA;AAAzB,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKL,KAAK,CAACM,QADX,CADJ;AAKH","sourcesContent":["import React from \"react\";\nimport Io from 'socket.io-client'\n\n\n\nexport const CTX = React.createContext();\n\n\nconst initState ={\n    chat :[\n        {from:'Prasad',msg:'hello'},\n    ]\n    // topic2 :[\n    //     {from:'aaron',msg:'hello'},\n\n    // ]\n\n}\n\nfunction reducer(state, action){\n    const {from,msg} = action.payload;\n    switch(action.type){\n       case \"RECEIVE_MESSAGE\":\n           return{\n            ...state,\n            [action.payload.topic]:[\n                ...state[action.payload.topic],\n                {\n                    from,\n                    msg \n                }\n            ]\n           }\n        default:\n            return state\n    }\n}\n\n\n\nlet socket;\nfunction sendChatAction(value){\n    socket.emit('chat message',value);  \n}\n\n\nexport default function Store(props){\n\n    const [allChats, dispatch] = React.useReducer(reducer, initState)\n\n    if(!socket){\n        socket = Io(':4000');\n        socket.on('chat message',function(msg){\n            dispatch({type :'RECEIVE_MESSAGE',payload: msg});\n            \n        })\n    }\n    const user = \"Prasad\"\n    \n    \n    return(\n        <CTX.Provider value= {{allChats,sendChatAction,user}}>\n            {props.children}\n        </CTX.Provider >\n    )\n}"]},"metadata":{},"sourceType":"module"}